name: build-and-deploy

on:
  workflow_call:
    inputs:
      deploy:
        type: boolean
      notify:
        type: boolean

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
      - run: git lfs pull
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.sha }}
          context: .

  deploy:
    if: ${{ inputs.deploy }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: deploy
        run: |
          curl -sfLO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -sfLo yaml2json "https://github.com/wakeful/yaml2json/releases/download/0.4.0/yaml2json-linux-amd64"
          chmod a+x yaml2json kubectl
          sudo mv kubectl yaml2json /usr/bin/
          mkdir ~/.kube
          echo "$KUBECONFIG_DATA" | base64 -d > ~/.kube/config


          NAMESPACE="${BRANCH##*/}"
          if [[ "$NAMESPACE" == "kube-system" ]]; then
            echo "Illegal branch name" >&2
            exit 1
          fi

          kubectl create namespace "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -

          echo "Deploying branch $BRANCH to namespace $NAMESPACE with tag $TAG"
          ./deploy/deploy "$NAMESPACE" "ghcr.io/${{ github.repository }}:$TAG"
        env:
          KUBECONFIG_DATA: "${{ secrets.KUBECONFIG }}"
          BRANCH: "${{github.head_ref || github.ref_name}}"
          TAG: "${{github.sha}}"

  # Only notify once either for the build failing or the deploy outcome
  notify-build:
    needs: build
    secrets: inherit
    if: ${{ inputs.notify && always() && needs.build.result != 'success' }}
    uses: ./.github/workflows/notify.yaml
    with:
      action: build
      status: ${{ needs.build.result }}

  notify-deploy:
    needs:
     - build
     - deploy
    secrets: inherit
    if: ${{ inputs.notify && always() && needs.build.result == 'success' }}
    uses: ./.github/workflows/notify.yaml
    with:
      action: deploy
      status: ${{ needs.deploy.result }}
